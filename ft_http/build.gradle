apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
  /*  compile 'com.android.support:appcompat-v7:23.4.0'*/
    testCompile 'junit:junit:4.12'
    compile files('libs/artemis-1.1.0.jar')
     compile 'com.friendtimes.sdk:ft_logger:1.0.1'

}


/* 有財平台专用
task jarMyLib(type: Jar, dependsOn: ['build']) {
    archiveName = 'ft_http_1.1.2.jar'
    from('build/intermediates/classes/release')
    from(project.zipTree('libs/artemis-1.1.0.jar'))
    from(project.zipTree('libs/ft_logger.jar'))
    destinationDir = file('build/libs')
    exclude('com/friendtimes/http/BuildConfig.class')
    exclude('com/friendtimes/http/BuildConfig\$*.class')
    exclude('**//*
R.class')
    exclude('**//*
R\$*.class')
    exclude('android*/
/**')
    include('com/friendtimes/http*/
/**')
    include('com/mistyrain/okhttp*/
/**')
    include('com/friendtimes/ft_logger*/
/**')
}
*/

task jarMyLib(type: Jar, dependsOn: ['build']) {
    archiveName = 'ft_http_1.1.6.jar'
    from('build/intermediates/classes/release')
    from(project.zipTree('libs/artemis-1.1.0.jar'))
    destinationDir = file('build/libs')
    exclude('com/friendtimes/http/BuildConfig.class')
    exclude('com/friendtimes/http/BuildConfig\$*.class')
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('android/**')
    include('com/friendtimes/http/**')
    include('com/mistyrain/okhttp/**')
}

def Properties props = new Properties()
def propFile = file('uploadconfig.properties')   //pay attention to the path
def BUILD_MIN_SDK_VERSION, BUILD_TARGET_SDK_VERSION, BUILD_SDK_VERSION, BUILD_TOOLS_VERSION, NEXUS_USERNAME, NEXUS_PASSWORD, MODULE_VERSION_NAME, MODULE_VERSION_CODE, POM_GROUP_ID, POM_ARTIFACT_ID, POM_PACKAGING, POM_NAME, POM_DESCRIPTION, POM_LICENCE_NAME, POM_LICENCE_URL, POM_LICENCE_DIST, POM_DEVELOPER_ID, POM_DEVELOPER_NAME, POM_DEVELOPER_EMAIL;
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props != null && props.containsKey('BUILD_MIN_SDK_VERSION')) {
        BUILD_MIN_SDK_VERSION = props['BUILD_MIN_SDK_VERSION']
    }
    if (props != null && props.containsKey('BUILD_TARGET_SDK_VERSION')) {
        BUILD_TARGET_SDK_VERSION = props['BUILD_TARGET_SDK_VERSION']
    }

    if (props != null && props.containsKey('BUILD_SDK_VERSION')) {
        BUILD_SDK_VERSION = props['BUILD_SDK_VERSION']
    }

    if (props != null && props.containsKey('BUILD_TOOLS_VERSION')) {
        BUILD_TOOLS_VERSION = props['BUILD_TOOLS_VERSION']
    }

    if (props != null && props.containsKey('NEXUS_USERNAME')) {
        NEXUS_USERNAME = props['NEXUS_USERNAME']
    }
    if (props != null && props.containsKey('NEXUS_PASSWORD')) {
        NEXUS_PASSWORD = props['NEXUS_PASSWORD']
    }
    if (props != null && props.containsKey('MODULE_VERSION_NAME')) {
        MODULE_VERSION_NAME = props['MODULE_VERSION_NAME']
    }
    if (props != null && props.containsKey('MODULE_VERSION_CODE')) {
        MODULE_VERSION_CODE = props['MODULE_VERSION_CODE']
    }
    if (props != null && props.containsKey('POM_GROUP_ID')) {
        POM_GROUP_ID = props['POM_GROUP_ID']
    }
    if (props != null && props.containsKey('POM_ARTIFACT_ID')) {
        POM_ARTIFACT_ID = props['POM_ARTIFACT_ID']
    }
    if (props != null && props.containsKey('POM_PACKAGING')) {
        POM_PACKAGING = props['POM_PACKAGING']
    }
    if (props != null && props.containsKey('POM_NAME')) {
        POM_NAME = props['POM_NAME']
    }
    if (props != null && props.containsKey('POM_DESCRIPTION')) {
        POM_DESCRIPTION = props['POM_DESCRIPTION']
    }
    if (props != null && props.containsKey('POM_LICENCE_NAME')) {
        POM_LICENCE_NAME = props['POM_LICENCE_NAME']
    }
    if (props != null && props.containsKey('POM_LICENCE_URL')) {
        POM_LICENCE_URL = props['POM_LICENCE_URL']
    }
    if (props != null && props.containsKey('POM_LICENCE_DIST')) {
        POM_LICENCE_DIST = props['POM_LICENCE_DIST']
    }
    if (props != null && props.containsKey('POM_DEVELOPER_ID')) {
        POM_DEVELOPER_ID = props['POM_DEVELOPER_ID']
    }
    if (props != null && props.containsKey('POM_DEVELOPER_NAME')) {
        POM_DEVELOPER_NAME = props['POM_DEVELOPER_NAME']
    }
    if (props != null && props.containsKey('POM_DEVELOPER_EMAIL')) {
        POM_DEVELOPER_EMAIL = props['POM_DEVELOPER_EMAIL']
    }
}

def isReleaseBuild() {
    return FT_HTTP_VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            'http://192.168.0.177:8081/nexus/content/repositories/releases'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            'http://192.168.0.177:8081/nexus/content/repositories/snapshots'
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : 'admin'
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : 'admin123'
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = FT_HTTP_POM_GROUP_ID
                pom.artifactId = FT_HTTP_POM_ARTIFACT_ID
                pom.version = FT_HTTP_VERSION_NAME
                pom.packaging = FT_HTTP_POM_PACKAGING

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name FT_HTTP_POM_NAME
                    description FT_HTTP_POM_DESCRIPTION

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            name POM_DEVELOPER_NAME
                            id POM_DEVELOPER_ID
                            email POM_DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task sourceCode(type: Zip) {
        appendix = extension = 'src'
        from 'AndroidManifest.xml'
        into('res') {
            from 'res'
        }
        into('src') {
            from 'src'
        }
        into('libs') {
            from 'libs'
        }
    }

    task androidJavadocs(type: Javadoc) {
        options.encoding = "utf-8"
        source = android.sourceSets.main.java.srcDirs
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath += files(ext.androidJar)
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives sourceCode
        archives androidSourcesJar
        // archives androidJavadocsJar
    }
}



