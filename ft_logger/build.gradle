apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
   /* compile 'com.android.support:appcompat-v7:23.4.0'*/
    testCompile 'junit:junit:4.12'
}

task jarMyLib(type: Jar, dependsOn: ['build']) {
    archiveName = 'ft_logger_1.0.1.jar'
    from('build/intermediates/classes/release')
    destinationDir = file('build/libs')
    exclude('com/friendtimes/ft_logger/BuildConfig.class')
    exclude('com/friendtimes/ft_logger/BuildConfig\$*.class')
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('android/**')
    include('com/friendtimes/ft_logger/**')
}


def isReleaseBuild() {
    return FT_LOGGER_VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            'http://192.168.0.177:8081/nexus/content/repositories/releases'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            'http://192.168.0.177:8081/nexus/content/repositories/snapshots'
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : 'admin'
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : 'admin123'
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = FT_LOGGER_POM_GROUP_ID
                pom.artifactId = FT_LOGGER_POM_ARTIFACT_ID
                pom.version = FT_LOGGER_VERSION_NAME
                pom.packaging = FT_LOGGER_POM_PACKAGING

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name FT_LOGGER_POM_NAME
                    description FT_LOGGER_POM_DESCRIPTION

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            name POM_DEVELOPER_NAME
                            id POM_DEVELOPER_ID
                            email POM_DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task sourceCode(type: Zip) {
        appendix = extension = 'src'
        from 'AndroidManifest.xml'
        into('res') {
            from 'res'
        }
        into('src') {
            from 'src'
        }
        into('libs') {
            from 'libs'
        }
    }

    task androidJavadocs(type: Javadoc) {
        options.encoding = "utf-8"
        source = android.sourceSets.main.java.srcDirs
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath += files(ext.androidJar)
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives sourceCode
        archives androidSourcesJar
        // archives androidJavadocsJar
    }
}
